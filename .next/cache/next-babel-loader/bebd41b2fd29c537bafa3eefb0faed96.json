{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/hoc/counter/counter.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nconst {\n  0: count,\n  1: setCount\n} = useState(0);\n\nconst Counter = OriginalComponent => {\n  const incrementCount = () => {\n    setCount(c => c + 1);\n  };\n\n  const decrementCount = () => {\n    setCount(c => c - 1);\n  };\n\n  return newCounter => __jsx(OriginalComponent, _extends({\n    count: count,\n    incrementCount: incrementCount,\n    decrementCount: decrementCount\n  }, newCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }), newCounter);\n};\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/hoc/counter/counter.tsx"],"names":["React","useState","count","setCount","Counter","OriginalComponent","incrementCount","c","decrementCount","newCounter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAYA,MAAM;AAAA,KAACC,KAAD;AAAA,KAAQC;AAAR,IAAoBF,QAAQ,CAAC,CAAD,CAAlC;;AACA,MAAMG,OAAO,GAAIC,iBAAD,IAA4B;AACxC,QAAMC,cAAc,GAAG,MAAM;AACzBH,IAAAA,QAAQ,CAACI,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAR;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AACzBL,IAAAA,QAAQ,CAACI,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAR;AACH,GAFD;;AAIA,SAAQE,UAAD,IACH,MAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEP,KAA1B;AAAiC,IAAA,cAAc,EAAEI,cAAjD;AAAiE,IAAA,cAAc,EAAEE;AAAjF,KAAqGC,UAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkHA,UAAlH,CADJ;AAGH,CAZD;;KAAML,O;AAcN,eAAeA,OAAf","sourcesContent":["import React, {useState} from 'react';\n\ntype newCounterType = ({}) => {}\ntype incrementType = ({}) => {};\ntype decrementType = ({}) => {};\n\nexport type counterProps = {\n    count: number;\n    incrementCount: incrementType\n    decrementCount: decrementType\n}\n\nconst [count, setCount] = useState(0);\nconst Counter = (OriginalComponent: any) => {\n    const incrementCount = () => {\n        setCount(c => c + 1);\n    };\n\n    const decrementCount = () => {\n        setCount(c => c - 1);\n    };\n\n    return (newCounter: newCounterType) => (\n        <OriginalComponent count={count} incrementCount={incrementCount} decrementCount={decrementCount} {...newCounter}>{newCounter}</OriginalComponent>\n    );\n};\n\nexport default Counter;"]},"metadata":{},"sourceType":"module"}