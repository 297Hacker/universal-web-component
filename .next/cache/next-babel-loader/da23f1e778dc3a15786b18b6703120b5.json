{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nvar _jsxFileName = \"/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/InputField/InputField.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nconst Input = styled.input.withConfig({\n  displayName: \"InputField__Input\",\n  componentId: \"sc-3hn3ct-0\"\n})([\"border:1px solid #eee;border-radius:3px;font-size:16px;padding:10px 5px;outline:none;width:250px;\"]);\n_c = Input;\n\nconst InputField = props => {\n  _s2();\n\n  _s();\n\n  const initialQty = parseInt(props.qty);\n  const {\n    0: qty,\n    1: setQty\n  } = useState(initialQty);\n\n  const handleChange = e => {\n    const value = e.target.input;\n\n    if (value == '') {\n      console.log(value);\n    }\n\n    if (parseInt(value) >= 0) {\n      console.log(\"nada\");\n    }\n  };\n\n  const handleBlur = () => {\n    if (!qty) {\n      setQty(initialQty);\n    }\n  };\n\n  return __jsx(Input, {\n    name: props.name,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: e => handleChange(e),\n    onBlur: () => handleBlur(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  });\n};\n\n_s2(InputField, \"6VREeGP80q8PekUN4G6GUBoBMAE=\");\n\n_c3 = InputField;\n\n_s(InputField, \"0mL63eqQh1uqHF8LNVtuZ/Xuxvs=\");\n\n_c2 = InputField;\nInputField.defaultProps = {\n  name: 'input name',\n  placeholder: '',\n  type: 'name'\n};\nexport default InputField;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"InputField\");\n\nvar _c3;\n\n$RefreshReg$(_c3, \"InputField\");","map":{"version":3,"sources":["/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/InputField/InputField.tsx"],"names":["Input","styled","InputField","props","initialQty","parseInt","setQty","useState","handleChange","e","value","console","handleBlur","name","placeholder","type"],"mappings":";;;;;;AAAA,OAAA,KAAA,IAAA,QAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AASA,MAAMA,KAAK,GAAGC,MAAM,CAAT,KAAGA,CAAH,UAAGA,CAAH;AAAA,EAAA,WAAA,EAAA,mBAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAGA,EAAH,CAAX,mGAAW,CAAGA,CAAd;KAAMD,K;;AAUN,MAAME,UAAoC,GAAIC,KAAD,IAAW;AAAA;;AAAA,EAAA,EAAA;;AACpD,QAAMC,UAAU,GAAGC,QAAQ,CAACF,KAAK,CAAjC,GAA2B,CAA3B;AAEA,QAAM;AAAA,OAAA,GAAA;AAAA,OAAMG;AAAN,MAAgBC,QAAQ,CAA9B,UAA8B,CAA9B;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAY;AAC7B,UAAMC,KAAK,GAAGD,CAAC,CAADA,MAAAA,CAAd,KAAA;;AACA,QAAIC,KAAK,IAAT,EAAA,EAAiB;AACbC,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA;AACH;;AACD,QAAIN,QAAQ,CAARA,KAAQ,CAARA,IAAJ,CAAA,EAA0B;AACtBM,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA;AACH;AAPL,GAAA;;AAUA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAI,CAAJ,GAAA,EAAU;AACNN,MAAAA,MAAM,CAANA,UAAM,CAANA;AACH;AAHL,GAAA;;AAMA,SAAO,KAAA,CAAA,KAAA,EAAA;AAAO,IAAA,IAAI,EAAEH,KAAK,CAAlB,IAAA;AAAyB,IAAA,IAAI,EAAEA,KAAK,CAApC,IAAA;AAA2C,IAAA,WAAW,EAAEA,KAAK,CAA7D,WAAA;AAA2E,IAAA,QAAQ,EAAEM,CAAC,IAAID,YAAY,CAAtG,CAAsG,CAAtG;AAA2G,IAAA,MAAM,EAAE,MAAMI,UAAzH,EAAA;AAAA,IAAA,MAAA,EAAA,IAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAP;AArBJ,CAAA;;IAAMV,U;;MAAAA,U;;GAAAA,U;;MAAAA,U;AAwBNA,UAAU,CAAVA,YAAAA,GAA0B;AACtBW,EAAAA,IAAI,EADkB,YAAA;AAEtBC,EAAAA,WAAW,EAFW,EAAA;AAGtBC,EAAAA,IAAI,EAAE;AAHgB,CAA1Bb;AAMA,eAAA,UAAA","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\n\ntype InputFieldType = {\n    qty: any,\n    name: string,\n    placeholder?: string,\n    type: string,\n}\n\nconst Input = styled.input`\n    border: 1px solid #eee;\n    border-radius: 3px;\n    font-size: 16px;\n    padding: 10px 5px;\n    outline: none;\n    width: 250px;\n`;\n\n\nconst InputField: React.FC<InputFieldType> = (props) => {\n    const initialQty = parseInt(props.qty);\n\n    const [qty, setQty] = useState<number | ''>(initialQty);\n\n    const handleChange = (e: any) => {\n        const value = e.target.input;\n        if (value == '') {\n            console.log(value);\n        }\n        if (parseInt(value) >= 0) {\n            console.log(\"nada\");\n        }\n    };\n\n    const handleBlur = () => {\n        if (!qty) {\n            setQty(initialQty);\n        }\n    };\n\n    return <Input name={props.name} type={props.type} placeholder={props.placeholder} onChange={e => handleChange(e)} onBlur={() => handleBlur()}/>\n};\n\nInputField.defaultProps = {\n    name: 'input name',\n    placeholder: '',\n    type: 'name'\n};\n\nexport default InputField;\n"]},"metadata":{},"sourceType":"module"}