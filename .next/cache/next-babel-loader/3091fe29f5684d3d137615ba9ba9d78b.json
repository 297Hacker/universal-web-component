{"ast":null,"code":"var _jsxFileName = \"/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/Form/Registration/RegistrationForm.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport InputField from '../../InputField/InputField';\nimport Button from '../../Button/Button';\nimport Spinner from '../../Spinner/Spinner';\n\nconst Registration = props => {\n  const formElementArray = [];\n\n  for (let key in props) {\n    formElementArray.push({\n      id: key,\n      config: this.props[key]\n    });\n  }\n\n  let form = formElementArray.map(formElement => __jsx(InputField, {\n    key: formElement.id,\n    name: formElement.name,\n    type: formElement.type,\n    maxValue: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }));\n\n  if (props.loading) {\n    form = __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, null, form, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Submit\"));\n};\n\nexport default Registration;","map":{"version":3,"sources":["/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/Form/Registration/RegistrationForm.tsx"],"names":["React","InputField","Button","Spinner","Registration","props","formElementArray","key","push","id","config","form","map","formElement","name","type","loading"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAgCA,MAAMC,YAAsB,GAAIC,KAAD,IAA8B;AACzD,QAAMC,gBAAqB,GAAG,EAA9B;;AACA,OAAK,IAAIC,GAAT,IAAgBF,KAAhB,EAAuB;AACnBC,IAAAA,gBAAgB,CAACE,IAAjB,CAAsB;AAClBC,MAAAA,EAAE,EAAEF,GADc;AAElBG,MAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWE,GAAX;AAFU,KAAtB;AAIH;;AACD,MAAII,IAAI,GAAGL,gBAAgB,CAACM,GAAjB,CAAsBC,WAAD,IAC5B,MAAC,UAAD;AAAY,IAAA,GAAG,EAAEA,WAAW,CAACJ,EAA7B;AAAiC,IAAA,IAAI,EAAEI,WAAW,CAACC,IAAnD;AAAyD,IAAA,IAAI,EAAED,WAAW,CAACE,IAA3E;AAAiF,IAAA,QAAQ,EAAE,EAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,CAAX;;AAGA,MAAIV,KAAK,CAACW,OAAV,EAAkB;AACdL,IAAAA,IAAI,GAAG,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,SAAO,4BACFA,IADE,EAEH,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,CAAP;AAIH,CAlBD;;AAoBA,eAAeP,YAAf","sourcesContent":["import React from 'react';\nimport InputField from '../../InputField/InputField';\nimport Button from '../../Button/Button';\nimport Spinner from '../../Spinner/Spinner';\n\ntype registrationProps = {\n    name: nameProps;\n    street: streetProps;\n    email: emailProps;\n    loading: boolean;\n}\n\ntype nameProps = {\n    elementType: string;\n    elementConfig: ElementConfig;\n    value: string;\n}\n\ntype streetProps = {\n    elementType: string;\n    elementConfig: ElementConfig;\n    value: string;\n}\n\ntype emailProps = {\n    elementType: string;\n    elementConfig: ElementConfig;\n    value: string;\n}\n\ntype ElementConfig = {\n    type: string;\n    placeholder: string;\n}\n\nconst Registration: React.FC = (props: registrationProps) => {\n    const formElementArray: any = [];\n    for (let key in props) {\n        formElementArray.push({\n            id: key,\n            config: this.props[key]\n        });\n    }\n    let form = formElementArray.map((formElement: any) => (\n        <InputField key={formElement.id} name={formElement.name} type={formElement.type} maxValue={20}/>\n    ));\n    if (props.loading){\n        form = <Spinner></Spinner>;\n    }\n    return <>\n        {form}\n        <Button>Submit</Button>\n    </>\n};\n\nexport default Registration;"]},"metadata":{},"sourceType":"module"}