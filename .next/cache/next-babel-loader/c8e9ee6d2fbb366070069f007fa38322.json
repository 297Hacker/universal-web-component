{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _jsxFileName = \"/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/RenderProps/Resource.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nconst makeCounter = Component => {\n  var _temp;\n\n  return _temp = class MakeCounter extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"state\", {\n        value: 0\n      });\n\n      _defineProperty(this, \"increment\", () => {\n        this.setState(prevState => ({\n          value: prevState.value === this.props.maxValue ? prevState.value : prevState.value + 1\n        }));\n      });\n\n      _defineProperty(this, \"decrement\", () => {\n        this.setState(prevState => ({\n          value: prevState.value === this.props.minValue ? prevState.value : prevState.value - 1\n        }));\n      });\n    }\n\n    render() {\n      const _this$props = this.props,\n            {\n        minValue,\n        maxValue\n      } = _this$props,\n            props = _objectWithoutProperties(_this$props, [\"minValue\", \"maxValue\"]);\n\n      return __jsx(Component, _extends({}, props, {\n        value: this.state.value,\n        onIncrement: this.increment,\n        onDecrement: this.decrement,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }, _temp;\n};","map":{"version":3,"sources":["/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/RenderProps/Resource.tsx"],"names":["makeCounter","Component","React","value","prevState","render","maxValue","props"],"mappings":";;;;;;;;;;AAeA,MAAMA,WAAW,GACbC,SADgB,IAAA;AAAA,MAAA,KAAA;;AAAA,SAAA,KAAA,GAGhB,MAAA,WAAA,SAA0BC,KAAK,CAA/B,SAAA,CAGM;AAAA,IAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,YAAA,GAAA,IAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EACwB;AACtBC,QAAAA,KAAK,EAAE;AADe,OADxB,CAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAKU,MAAM;AACd,aAAA,QAAA,CAAcC,SAAS,KAAK;AACxBD,UAAAA,KAAK,EACDC,SAAS,CAATA,KAAAA,KAAoB,KAAA,KAAA,CAApBA,QAAAA,GACMA,SAAS,CADfA,KAAAA,GAEMA,SAAS,CAATA,KAAAA,GAAkB;AAJJ,SAAL,CAAvB;AANF,OAAA,CAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAcU,MAAM;AACd,aAAA,QAAA,CAAcA,SAAS,KAAK;AACxBD,UAAAA,KAAK,EACDC,SAAS,CAATA,KAAAA,KAAoB,KAAA,KAAA,CAApBA,QAAAA,GACMA,SAAS,CADfA,KAAAA,GAEMA,SAAS,CAATA,KAAAA,GAAkB;AAJJ,SAAL,CAAvB;AAfF,OAAA,CAAA;AAAA;;AAuBFC,IAAAA,MAAM,GAAG;AACL,YAAA,WAAA,GAAyC,KAAzC,KAAA;AAAA,YAAM;AAAA,QAAA,QAAA;AAAYC,QAAAA;AAAZ,UAAN,WAAA;AAAA,YAA+BC,KAA/B,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,UAAA,CAAA,CAAA;;AACA,aACI,KAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEI,QAAA,KAAK,EAAE,KAAA,KAAA,CAFX,KAAA;AAGI,QAAA,WAAW,EAAE,KAHjB,SAAA;AAII,QAAA,WAAW,EAAE,KAJjB,SAAA;AAAA,QAAA,MAAA,EAAA,IAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA,EAAA;AAAA,UAAA,YAAA,EAAA;AAAA;AAAA,OAAA,CAAA,CADJ;AAQH;;AAjCC,GANU,EAAA,KAAA;AAApB,CAAA","sourcesContent":["export interface InjectedCounterProps {\n    value: number;\n    onIncrement(): void;\n    onDecrement(): void;\n}\n\ninterface MakeCounterProps {\n    minValue?: number;\n    maxValue?: number;\n}\n\ninterface MakeCounterState {\n    value: number;\n}\n\nconst makeCounter = <P extends InjectedCounterProps>(\n    Component: React.ComponentType<P>\n) =>\n    class MakeCounter extends React.Component<\n        Subtract<P, InjectedCounterProps> & MakeCounterProps,\n        MakeCounterState\n        > {\n        state: MakeCounterState = {\n            value: 0,\n        };\n\n        increment = () => {\n            this.setState(prevState => ({\n                value:\n                    prevState.value === this.props.maxValue\n                        ? prevState.value\n                        : prevState.value + 1,\n            }));\n        };\n\n        decrement = () => {\n            this.setState(prevState => ({\n                value:\n                    prevState.value === this.props.minValue\n                        ? prevState.value\n                        : prevState.value - 1,\n            }));\n        };\n\n        render() {\n            const { minValue, maxValue, ...props } = this.props;\n            return (\n                <Component\n                    {...props as P}\n                    value={this.state.value}\n                    onIncrement={this.increment}\n                    onDecrement={this.decrement}\n                />\n            );\n        }\n    };"]},"metadata":{},"sourceType":"module"}