{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/pages/playground.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport Pizza from '../components/Pizza/Pizza';\nimport Controls from \"../components/Pizza/Controls/Controls\";\n\nconst Playground = () => {\n  _s2();\n\n  _s();\n\n  let {\n    0: ingredientState,\n    1: updateIngredient\n  } = useState({\n    ingredients: {\n      crust: 0,\n      sauce: 0,\n      ham: 0,\n      cheese: 0,\n      pepperoni: 0,\n      mushroom: 0\n    }\n  });\n\n  let addIngredientHandler = type => {\n    const oldCount = ingredientState.ingredients[type.key];\n    const updatedCount = oldCount + 1;\n\n    const updatedIngredients = _objectSpread({}, ingredientState.ingredients);\n\n    updatedIngredients[type] = updatedCount;\n  };\n\n  let removeIngredientHandler = type => {\n    const oldCount = ingredientState.ingredients[type];\n\n    if (oldCount <= 0) {\n      return;\n    }\n\n    const updatedCount = oldCount - 1;\n\n    const updatedIngredients = _objectSpread({}, ingredientState.ingredients);\n\n    updatedIngredients[type] = updatedCount;\n  };\n\n  return __jsx(Layout, {\n    page: \"Playground\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(Controls, {\n    ingredientAdded: addIngredientHandler,\n    ingredientRemove: removeIngredientHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), __jsx(Pizza, {\n    ingredients: ingredientState.ingredients,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s2(Playground, \"OVE7q8SbNAt8edGBuJElOripE64=\");\n\n_c2 = Playground;\n\n_s(Playground, \"AJF/SVj9oi1hAHBNSVfqWxFPhR0=\");\n\n_c = Playground;\nexport default Playground;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playground\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Playground\");","map":{"version":3,"sources":["/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/pages/playground.tsx"],"names":["Playground","updateIngredient","useState","ingredients","crust","sauce","ham","cheese","pepperoni","mushroom","addIngredientHandler","type","oldCount","ingredientState","updatedCount","updatedIngredients","removeIngredientHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,QAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,6BAAA;AACA,OAAA,KAAA,MAAA,2BAAA;AACA,OAAA,QAAA,MAAA,uCAAA;;AAEA,MAAMA,UAAmB,GAAG,MAAM;AAAA;;AAAA,EAAA,EAAA;;AAC9B,MAAI;AAAA,OAAA,eAAA;AAAA,OAAkBC;AAAlB,MAAsCC,QAAQ,CAAC;AACjDC,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EADI,CAAA;AAETC,MAAAA,KAAK,EAFI,CAAA;AAGTC,MAAAA,GAAG,EAHM,CAAA;AAITC,MAAAA,MAAM,EAJG,CAAA;AAKTC,MAAAA,SAAS,EALA,CAAA;AAMTC,MAAAA,QAAQ,EAAE;AAND;AADoC,GAAD,CAAlD;;AAUD,MAAIC,oBAAoB,GAAIC,IAAD,IAAc;AACpC,UAAMC,QAAQ,GAAGC,eAAe,CAAfA,WAAAA,CAA4BF,IAAI,CAAjD,GAAiBE,CAAjB;AACA,UAAMC,YAAY,GAAGF,QAAQ,GAA7B,CAAA;;AACA,UAAMG,kBAAkB,GAAA,aAAA,CAAA,EAAA,EACjBF,eAAe,CADtB,WAAwB,CAAxB;;AAGAE,IAAAA,kBAAkB,CAAlBA,IAAkB,CAAlBA,GAAAA,YAAAA;AANL,GAAA;;AASC,MAAIC,uBAAuB,GAAIL,IAAD,IAAU;AACpC,UAAMC,QAAQ,GAAGC,eAAe,CAAfA,WAAAA,CAAjB,IAAiBA,CAAjB;;AACA,QAAID,QAAQ,IAAZ,CAAA,EAAmB;AACf;AACH;;AACD,UAAME,YAAY,GAAGF,QAAQ,GAA7B,CAAA;;AACA,UAAMG,kBAAkB,GAAA,aAAA,CAAA,EAAA,EACjBF,eAAe,CADtB,WAAwB,CAAxB;;AAGAE,IAAAA,kBAAkB,CAAlBA,IAAkB,CAAlBA,GAAAA,YAAAA;AATJ,GAAA;;AAYA,SACI,KAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,IAAI,EAAZ,YAAA;AAAA,IAAA,MAAA,EAAA,IAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,EACI,KAAA,CAAA,QAAA,EAAA;AAAU,IAAA,eAAe,EAAzB,oBAAA;AAAiD,IAAA,gBAAgB,EAAjE,uBAAA;AAAA,IAAA,MAAA,EAAA,IAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CADJ,EAEI,KAAA,CAAA,KAAA,EAAA;AAAO,IAAA,WAAW,EAAEF,eAAe,CAAnC,WAAA;AAAA,IAAA,MAAA,EAAA,IAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAFJ,CADJ;AAhCJ,CAAA;;IAAMb,U;;MAAAA,U;;GAAAA,U;;KAAAA,U;AAwCN,eAAA,UAAA","sourcesContent":["import React, {useState} from 'react';\nimport Layout from '../components/Layout/Layout';\nimport Pizza from '../components/Pizza/Pizza';\nimport Controls from \"../components/Pizza/Controls/Controls\";\n\nconst Playground:React.FC = () => {\n    let [ingredientState, updateIngredient] = useState({\n      ingredients: {\n          crust:0,\n          sauce:0,\n          ham: 0,\n          cheese: 0,\n          pepperoni: 0,\n          mushroom: 0\n      }\n    });\n   let addIngredientHandler = (type: {}) => {\n        const oldCount = ingredientState.ingredients[type.key];\n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...ingredientState.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n    };\n\n    let removeIngredientHandler = (type) => {\n        const oldCount = ingredientState.ingredients[type];\n        if (oldCount <= 0) {\n            return\n        }\n        const updatedCount = oldCount - 1;\n        const updatedIngredients = {\n            ...ingredientState.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n    };\n\n    return (\n        <Layout page=\"Playground\">\n            <Controls ingredientAdded={addIngredientHandler} ingredientRemove={removeIngredientHandler}/>\n            <Pizza ingredients={ingredientState.ingredients}/>\n        </Layout>\n    )\n};\n\nexport default Playground;"]},"metadata":{},"sourceType":"module"}