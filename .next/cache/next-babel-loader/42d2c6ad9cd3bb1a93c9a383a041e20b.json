{"ast":null,"code":"var _jsxFileName = \"/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/hoc/Counter/counter.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nexport const Counter = OriginalComponent => {\n  _s();\n\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n\n  const incrementCount = () => {\n    return setCount(c => c + 1);\n  };\n\n  const decrementCount = () => {\n    return setCount(c => c - 1);\n  };\n\n  return wrappedComponent => __jsx(OriginalComponent, {\n    count: count,\n    incrementCount: incrementCount,\n    decrementCount: decrementCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, wrappedComponent);\n};\n\n_s(Counter, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c = Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/nigel/Documents/Projects/drupal/universal/universal-web-component/src/components/hoc/Counter/counter.tsx"],"names":["React","useState","Counter","OriginalComponent","count","setCount","incrementCount","c","decrementCount","wrappedComponent"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAaA,OAAO,MAAMC,OAAO,GAAIC,iBAAD,IAA4B;AAAA;;AAC/C,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMK,cAAc,GAAG,MAAM;AACzB,WAAOD,QAAQ,CAACE,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAf;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AACzB,WAAOH,QAAQ,CAACE,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAf;AACH,GAFD;;AAIA,SAAQE,gBAAD,IACH,MAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEL,KAA1B;AACmB,IAAA,cAAc,EAAEE,cADnC;AAEmB,IAAA,cAAc,EAAEE,cAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEoDC,gBAFpD,CADJ;AAKH,CAhBM;;GAAMP,O;;KAAAA,O","sourcesContent":["import React, {useState} from 'react';\n\ntype newCounterType = ({}) => {};\n\ntype incrementType = () => void;\ntype decrementType = () => void;\n\nexport type counterProps = {\n    count: number;\n    incrementCount: incrementType;\n    decrementCount: decrementType;\n}\n\nexport const Counter = (OriginalComponent: any) => {\n    const [count, setCount] = useState(0);\n\n    const incrementCount = () => {\n        return setCount(c => c + 1);\n    };\n\n    const decrementCount = () => {\n        return setCount(c => c - 1);\n    };\n\n    return (wrappedComponent: newCounterType) => (\n        <OriginalComponent count={count}\n                           incrementCount={incrementCount}\n                           decrementCount={decrementCount}>{wrappedComponent}</OriginalComponent>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}